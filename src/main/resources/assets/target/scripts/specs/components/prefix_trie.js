define(["underscore","mocha","chai","components/prefix_trie"],function(e,t,n,r){var i,s;s=i=n.expect,describe("A prefix trie",function(){var e,t;t=["hive","hello","zulu"],beforeEach(function(){e=new r,t.forEach(e.addWord,e)}),it("should have the words that are added to it",function(){var n=e.getAllWords();t.forEach(function(e){i(n).to.include(e)})}),it("should know which words are its own",function(){var t=e.getWords()}),it("should allow more words to be added",function(){i(e.addWord("word")).to.be.eql(e),i(e.getAllWordsCount()).to.be.eql(4)}),it("should not allow words to be duplicated",function(){i(e.addWord(t[0])).to.be.eql(e),i(e.getAllWordsCount()).to.be.eql(3)}),it("should be able to find words",function(){var n=e.getSimilar(t[0],0);i(n).to.have.lengthOf(1),i(n[0]).to.include.key("word"),i(n[0].word).to.be.eql(t[0])}),it('should be able to "fuzz" similar words',function(){i(e.getAllWordsCount()).to.be.eql(3);var t=e.getSimilar("hilt",2);i(t).to.have.lengthOf(2,"hilt should have two matches")}),it('should be able to locate similarities when fuzzing "have"',function(){function r(e,t,n,r){i(t).to.include.key(n),i(t[n]).to.be.eql(r,["Matches for",e,"should have value",r,"at position",n].join(" "))}function s(e,t,n,i){r(e,t,"start",n),r(e,t,"end",i)}e.addWord("give"),i(e.getAllWordsCount()).to.be.eql(4);var t=e.getSimilar("have",3),n={hive:[[0,1],[2,4]],hello:[[0,1]],give:[[2,4]]};i(t).to.have.lengthOf(3,"there should be 3 results"),t.forEach(function(e){i(n).to.be.ok(),i(e).to.be.ok(),i(e).to.include.key("matches");var t=e.word,r=e.matches,o;i(n).to.include.key(t),o=n[t],i(r).to.have.lengthOf(o.length,[t,"should have",o.length,"matches"].join(" ")),r.forEach(function(e,n){s(t,e,o[n][0],o[n][1])},this)})})})});